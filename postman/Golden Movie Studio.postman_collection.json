{
	"info": {
		"_postman_id": "8006d285-7070-47b4-93cc-db0764d5b21d",
		"name": "Golden Movie Studio",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "44430224",
		"_collection_link": "https://galactic-crater-3493002.postman.co/workspace/L%C3%ADvia-Barbosa's-Workspace~32559ead-6038-4ca5-8514-b798a8d8070d/collection/44430224-8006d285-7070-47b4-93cc-db0764d5b21d?action=share&source=collection_link&creator=44430224"
	},
	"item": [
		{
			"name": "GET",
			"item": [
				{
					"name": "Busca de filmes com palavra-chave válida",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar as propriedades titulo, descricao, ano e diretor em todos os filmes cadastrados\", function () {\r",
									"    const filmes = pm.response.json();\r",
									"    pm.expect(filmes).to.be.an(\"array\").that.is.not.empty;\r",
									"    \r",
									"    filmes.forEach(filme => {\r",
									"        pm.expect(filme).to.have.property(\"titulo\");\r",
									"        pm.expect(filme).to.have.property(\"descricao\");\r",
									"        pm.expect(filme).to.have.property(\"ano\");\r",
									"        pm.expect(filme).to.have.property(\"diretor\");\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  {\r\n    \"id\": 1,\r\n    \"titulo\": \"A Era do Gelo 3\",\r\n    \"descricao\": \"Depois que Sid rouba alguns ovos de dinossauro, Manny, Diego e o resto de seus amigos pré-históricos entram em um mundo misterioso e subterrâneo para resgatar Sid. Durante o curso da sua missão, o grupo encontra muitas criaturas grandes e pequenas, incluindo os carnívoros famintos e implacáveis, caçando o dinossauro chamado Buck.\",\r\n    \"ano\": 2009,\r\n    \"diretor\": \"Carlos Saldanha\"\r\n  }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/busca/A%20Era%20do%20Gelo%203",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"busca",
								"A%20Era%20do%20Gelo%203"
							]
						}
					},
					"response": []
				},
				{
					"name": "Busca de filmes sem palavra-chave",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  {\r\n    \"id\": 1,\r\n    \"titulo\": \"A Era do Gelo 3\",\r\n    \"descricao\": \"Depois que Sid rouba alguns ovos de dinossauro, Manny, Diego e o resto de seus amigos pré-históricos entram em um mundo misterioso e subterrâneo para resgatar Sid. Durante o curso da sua missão, o grupo encontra muitas criaturas grandes e pequenas, incluindo os carnívoros famintos e implacáveis, caçando o dinossauro chamado Buck.\",\r\n    \"ano\": 2009,\r\n    \"diretor\": \"Carlos Saldanha\"\r\n  }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/busca/ ",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"busca",
								" "
							]
						}
					},
					"response": []
				},
				{
					"name": "Busca de filmes com palavra-chave inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 404\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Nenhum filme encontrado com esse título.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  {\r\n    \"id\": 1,\r\n    \"titulo\": \"A Era do Gelo 3\",\r\n    \"descricao\": \"Depois que Sid rouba alguns ovos de dinossauro, Manny, Diego e o resto de seus amigos pré-históricos entram em um mundo misterioso e subterrâneo para resgatar Sid. Durante o curso da sua missão, o grupo encontra muitas criaturas grandes e pequenas, incluindo os carnívoros famintos e implacáveis, caçando o dinossauro chamado Buck.\",\r\n    \"ano\": 2009,\r\n    \"diretor\": \"Carlos Saldanha\"\r\n  }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/busca/Matrix",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"busca",
								"Matrix"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "POST",
			"item": [
				{
					"name": "Cadastro de filme com sucesso",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Filme cadastrado com sucesso!\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"titulo\": \"{{$randomWords}}\",\r\n  \"descricao\": \"{{$randomWords}}\",\r\n  \"ano\": 2000,\r\n  \"diretor\": \"{{$randomFullName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/cadastro/filmes",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"cadastro",
								"filmes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cadastro de filme com título vazio",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Título não pode estar vazio\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"titulo\": \"\",\r\n  \"descricao\": \"{{$randomWords}}\",\r\n  \"ano\": 2000,\r\n  \"diretor\": \"{{$randomFullName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/cadastro/filmes",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"cadastro",
								"filmes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cadastro de filme com título inválido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Título deve ser uma string\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"titulo\": 1,\r\n  \"descricao\": \"{{$randomWords}}\",\r\n  \"ano\": 2000,\r\n  \"diretor\": \"{{$randomFullName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/cadastro/filmes",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"cadastro",
								"filmes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cadastro de filme com descrição vazia",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Descrição não pode estar vazio\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"titulo\": \"{{$randomWords}}\",\r\n  \"descricao\": \"\",\r\n  \"ano\": 2000,\r\n  \"diretor\": \"{{$randomFullName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/cadastro/filmes",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"cadastro",
								"filmes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cadastro de filme com descrição inválida",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Descrição deve ser uma string\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"titulo\": \"{{$randomWords}}\",\r\n  \"descricao\": 5.6,\r\n  \"ano\": 2000,\r\n  \"diretor\": \"{{$randomFullName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/cadastro/filmes",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"cadastro",
								"filmes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cadastro de filme com ano vazio",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"titulo\": \"{{$randomWords}}\",\r\n  \"descricao\": \"{{$randomWords}}\",\r\n  \"ano\":\"\",\r\n  \"diretor\": \"{{$randomFullName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/cadastro/filmes",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"cadastro",
								"filmes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cadastro de filme com ano inválido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"titulo\": \"{{$randomWords}}\",\r\n  \"descricao\": \"{{$randomWords}}\",\r\n  \"ano\": \"2000\",\r\n  \"diretor\": \"{{$randomFullName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/cadastro/filmes",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"cadastro",
								"filmes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cadastro de filme com diretor vazio",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Diretor não pode estar vazio\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"titulo\": \"{{$randomWords}}\",\r\n  \"descricao\": \"{{$randomWords}}\",\r\n  \"ano\": 2000,\r\n  \"diretor\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/cadastro/filmes",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"cadastro",
								"filmes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cadastro de filme com diretor inválido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Diretor deve ser uma string\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"titulo\": \"{{$randomWords}}\",\r\n  \"descricao\": \"{{$randomWords}}\",\r\n  \"ano\": 2000,\r\n  \"diretor\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/cadastro/filmes",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"cadastro",
								"filmes"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}